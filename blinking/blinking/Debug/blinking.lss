
blinking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000e2  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000016b  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ec  00000000  00000000  0000029d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000012c  00000000  00000000  00000389  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000015a  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a2  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	2a c0       	rjmp	.+84     	; 0x8a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

#define wait(czas) for(int i=0;i<(czas);i++) _delay_ms(1);

int main(void)
{
	DDRB = (1<<PB1);
  38:	82 e0       	ldi	r24, 0x02	; 2
  3a:	87 bb       	out	0x17, r24	; 23
	DDRB = (1<<PB0);
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	87 bb       	out	0x17, r24	; 23
	DDRD = (1<<PD7);
  40:	80 e8       	ldi	r24, 0x80	; 128
  42:	81 bb       	out	0x11, r24	; 17
	TCCR1B=(1<<WGM13)|(1<WGM12)|(1<<CS10);
	*/
    while(1)
    {
		
        wait(950);
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	30 e0       	ldi	r19, 0x00	; 0
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	07 c0       	rjmp	.+14     	; 0x5c <__SREG__+0x1d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4e:	e9 ef       	ldi	r30, 0xF9	; 249
  50:	f0 e0       	ldi	r31, 0x00	; 0
  52:	31 97       	sbiw	r30, 0x01	; 1
  54:	f1 f7       	brne	.-4      	; 0x52 <__SREG__+0x13>
  56:	00 c0       	rjmp	.+0      	; 0x58 <__SREG__+0x19>
  58:	00 00       	nop
  5a:	01 96       	adiw	r24, 0x01	; 1
  5c:	86 3b       	cpi	r24, 0xB6	; 182
  5e:	f3 e0       	ldi	r31, 0x03	; 3
  60:	9f 07       	cpc	r25, r31
  62:	ac f3       	brlt	.-22     	; 0x4e <__SREG__+0xf>
		PORTB &= ~(1<<PB0); //ustaw stan niski na wejœciu - zapalenie diody
  64:	c0 98       	cbi	0x18, 0	; 24
		PORTD ^= (1<<PD7); // zmieñ stan patrz¹c na poprzedni, jaki by³
  66:	82 b3       	in	r24, 0x12	; 18
  68:	80 58       	subi	r24, 0x80	; 128
  6a:	82 bb       	out	0x12, r24	; 18
  6c:	82 e3       	ldi	r24, 0x32	; 50
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	e9 ef       	ldi	r30, 0xF9	; 249
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <__SREG__+0x35>
  78:	00 c0       	rjmp	.+0      	; 0x7a <__SREG__+0x3b>
  7a:	00 00       	nop
  7c:	01 97       	sbiw	r24, 0x01	; 1
		wait(50);
  7e:	00 97       	sbiw	r24, 0x00	; 0
  80:	b9 f7       	brne	.-18     	; 0x70 <__SREG__+0x31>
		PORTB |= (1<<PB0); //ustaw stan wysoki na wejœciu - zgaszenie diody
  82:	c0 9a       	sbi	0x18, 0	; 24
	TCCR1B=(1<<WGM13)|(1<WGM12)|(1<<CS10);
	*/
    while(1)
    {
		
        wait(950);
  84:	83 2f       	mov	r24, r19
  86:	92 2f       	mov	r25, r18
			if(i==1000){
				i=0;
			}
		}
		*/
    }
  88:	e9 cf       	rjmp	.-46     	; 0x5c <__SREG__+0x1d>

0000008a <_exit>:
  8a:	f8 94       	cli

0000008c <__stop_program>:
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__stop_program>
